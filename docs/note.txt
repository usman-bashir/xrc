Proposte
 Separazione controller per layer accesso ai dati e logiche di business da slot di presentazione
 Possibilita di scrivere direttamente slot in html
 Possibilita di usare razor
 Tenere funzionalita xslt
 Site manager su file system (tutto su source control, facile da trasferire)
 Struttura di base mvc, utilizzabile sia normalmente che su azure
 Doppia cache configurabile su presentazione e su layer accesso ai dati.
 Vocabolario senza necessità di rebuild
 Vocabolario unico con possibilita di categorizzare o taggare
 Utilizzo di ioc, tutti i servizi programmabili
 Pipeline style processing/rendering (dove si possono concatenare i processamenti da eseguire)
 Site configuration on .config (per url)
 Creazione di un modello di routing per il match tra url e news/photo/video...
 
Problemi
 Dipendenze dati: valutare se non risolvere con altri tipi di cache o con una nuova cache dependency
 Attualmente non è possibile avere un module che dipende da altri moduli che usano IContext. Valutare come registrare meglio la dipendenza IContext.
 I Module potrebbero essere anche singleton, dovrebbe essere chi li registra a decidere.
 XHtmlRendered dovrebbe renderizzare per i fragment solo il contenuto (senza xml declaration ...), pensare anche come gestire correttamente l'editor visual studio
 Gestire tutti i link anche relativi alla pagina corrente (comprese parent e Url.Content), bisogna quindi sistemare l'url di request e fare in modo che in caso di path restituisca sempre slash finale.
 Gestione errori comune.
 Unit test, verificare cosa manca
 Aggiungere log

TODO
 Verificare se File.Xml accetta virtual path, path assoluti e relativi.
 Aggiungere StaticContentView (for image, ...)
 Razor parameters "app" error. Check if set is present and if is declared on xrc assembly.
 Implement MapPath on XrcRequest e anche tutti gli altri metodo, gestendo un fallback alla request di base.
 Docs (architecture, features, advantages)
 Nuget GlobalAsax transform: WebActivator or Scott Hanselman article (https://bitbucket.org/davidebbo/webactivator/wiki/Home) 
 Valutare se usare invece che MarkdownXrc/MarkdownSharp  MarkdownDeep (http://www.toptensoftware.com/markdowndeep/). Licenza?
 ModuleCatalogService e ViewCatalogService potrebbero leggere i dati di windsor?
 ComponentCatalogService implementare anche AssignableTo (BasedOn) property to filter type based on an interface
 Authentication
 Cache
 Sample explanation
 Documentation website using xrc (reading class reference from assembly and xml doc, xslt transformation of xml doc, custom docs, search, ...)

Architecture
 http://www.gliffy.com/gliffy/#d=3845434&t=xrc_architecture

Features
•	Installazione e configurazione facile sia sulle macchine di sviluppo che in ambienti di produzione. Essendo un sito web asp.net può fare affidamento su tutte le features microsoft di pubblicazione (dovreste riuscire a scaricare da github la solution e provarla in locale senza problemi, i requisiti sono solo VS 2010 Sp1 e nuget aggiornato)
•	Ambiente di lavoro familiare a ogni sviluppatore utilizzando tecnologie standard (visual studio->html, xslt, razor, ...). Bisogna solo imparare la sintassi del file xrc ma è piuttosto semplice.
•	Integrazione con MVC che può quindi essere utilizzato quando necessario. Questo apre a tutto quello che gira attorno a MVC (componenti di terze parti, supporto , ...)
•	Compatibile con Azure (o altre cloud su cui gira asp.net)
•	Le pagine possono essere scritte in diversi linguaggi. Attualmente ho implementato xslt, razor e html. 
•	Il supporto a xslt offre una discreta portabilità con il vecchio codice
•	Possibilità di aggiungere e modificare pagine a 'caldo' (senza rebuild), ogni pagina è autonoma 
•	Componibilità pagine tramite slot, anche mischiando xslt e razor
•	Pagine template (layout)
•	Parametri nell'url (stile valueset) o ereditabili per url
•	Possibilità di accedere a qualsiasi libreria .net esterna per il reperimento dati (modules)
•	I dati possono essere in formato xml, json, .net model, ...
•	Configurazione differenti a seconda dell'ambiente (local, staging, prod, ...)
•	Sono disponibili tutte le funzionalità sui files di visual studio (versioning + 'social' coding + copia/incolla + search and reaplace)
•	Windsor or other IoC ready
•	Easy to add mobile view (thanks to mvc4)
•	Minify and bundlify (thanks to mvc4)

