<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xrc</name>
    </assembly>
    <members>
        <member name="M:xrc.Sites.ISiteConfiguration.GetAbsoluteUrl(System.String,System.Uri)">
            <summary>
            Converts a virtual (relative) path to an application absolute path using the specified site configuration as the root url.
            If the specified content path does not start with the tilde (~) character, this method returns an absolute url starting from contextUrl.
            </summary>
            <param name="contextUrl">Is the current context url. Used when the specified uri is a relative url but without tilde or to check if the secure url should be used.</param>
        </member>
        <member name="M:xrc.Modules.IUrlModule.Content(System.String,System.String)">
            <summary>
            Converts a virtual (relative) path to an application absolute path.
            </summary>
            <param name="contentPath">The virtual path of the content.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:xrc.Modules.IUrlModule.MvcAction(System.String,System.String)">
            <summary>
            Generates a fully qualified URL to an action method by using the specified action name and controller name.
            </summary>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <returns>The fully qualified URL to an action method.</returns>
        </member>
        <member name="M:xrc.Modules.IUrlModule.MvcAction(System.String,System.String,System.Object)">
            <summary>
            Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.
            </summary>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
            <returns>The fully qualified URL to an action method.</returns>
        </member>
        <member name="M:xrc.Modules.IUrlModule.MvcAction(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.
            </summary>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">An object that contains the parameters for a route.</param>
            <returns>The fully qualified URL to an action method.</returns>
        </member>
        <member name="M:xrc.Modules.IUrlModule.MvcAction(System.String,System.String,System.Object,System.String)">
            <summary>
            Generates a fully qualified URL for an action method by using the specified action name, controller name, route values, and protocol to use.
            </summary>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
            <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
            <returns>The fully qualified URL to an action method.</returns>
        </member>
        <member name="M:xrc.Modules.IUrlModule.MvcAction(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
            <summary>
            Generates a fully qualified URL for an action method by using the specified action name, controller name, route values, protocol to use, and host name.
            </summary>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">An object that contains the parameters for a route.</param>
            <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
            <param name="hostName">The host name for the URL.</param>
            <returns>The fully qualified URL to an action method.</returns>
        </member>
        <member name="M:xrc.ConvertEx.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            This method extends the Convert.ChangeType by supporting enum, nullable types and typeconverter.
            </summary>
        </member>
        <member name="P:xrc.Pages.Providers.FileSystem.XrcFile.CanonicalVirtualUrl">
            <summary>
            Gets the canonical url for the specified file.
            A canonical url is always lower case, doesn't include the index page but just append a slash at the end.
            Example: ~/folder1/, ~/folder1/page1
            
            </summary>
        </member>
        <member name="P:xrc.Pages.PageAction.Parent">
            <summary>
            Define the parent layout file.
            </summary>
        </member>
        <member name="T:xrc.Razor.ModuleInterceptor">
            <summary>
            Interceptor to invoke a module inside a page. This allow to create it using the factory and release it.
            Note: when MVC will correctly implement dependency injection for razor web page this class can be removed.
            </summary>
        </member>
        <member name="M:xrc.Views.RazorView.GetViewFullName(xrc.IContext)">
            <summary>
            Returns a View name in the razor format, starting from the web site path 
            </summary>
        </member>
        <member name="M:xrc.Reflection.Reflection.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            This method extends the Convert.ChangeType by supporting enum, nullable types and typeconverter.
            </summary>
        </member>
    </members>
</doc>
